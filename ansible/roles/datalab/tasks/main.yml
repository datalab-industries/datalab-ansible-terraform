---
- name: Sync local datalab submodule with remote
  ansible.posix.synchronize:
    src: "{{ playbook_dir }}/../src/datalab"
    dest: /home/{{ ansible_ssh_user }}
    recursive: true
    delete: false

- name: Copy encrypted API env file from vault
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/vaults/datalab/.env_server"
    dest: /home/{{ ansible_ssh_user }}/datalab/pydatalab/.env
    mode: "0644"

- name: Copy encrypted API config file from vault
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/vaults/datalab/prod_config.json"
    dest: /home/{{ ansible_ssh_user }}/datalab/pydatalab/config.json
    mode: "0644"

- name: Copy encrypted app config file from vault
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/vaults/datalab/.env"
    dest: /home/{{ ansible_ssh_user }}/datalab/webapp/.env
    mode: "0644"

- name: Build and launch database container
  community.docker.docker_compose_v2:
    project_src: /home/{{ ansible_ssh_user }}/datalab
    profiles: prod
    services: database

- name: Build and launch API container
  community.docker.docker_compose_v2:
    project_src: /home/{{ ansible_ssh_user }}/datalab
    profiles: prod
    services: api
    build: always
    env_files:
      - /home/{{ ansible_ssh_user }}/datalab/pydatalab/.env

- name: Check whether ssh config exists
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/vaults/datalab/.ssh/config"
  register: ssh_config
  delegate_to: localhost

- name: Check whether ssh config exists
  ansible.builtin.set_fact:
    ssh_config_defined: "{{ ssh_config.stat.exists }}"

- name: Sync local ssh config vault remote
  when: ssh_config_defined
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/vaults/datalab/.ssh"
    dest: /home/{{ ansible_ssh_user }}/.ssh
    mode: "0700"

- name: Create .ssh folder in container
  when: ssh_config_defined
  community.docker.docker_container_exec:
    container: datalab-api-1
    command: mkdir -p /root/.ssh

- name: Copy SSH config into API container
  when: ssh_config_defined
  community.docker.docker_container_copy_into:
    container: datalab-api-1
    path: /home/{{ ansible_ssh_user }}/.ssh/config
    container_path: /root/.ssh/config
    mode: "0700"

- name: Copy SSH public key into API container
  when: ssh_config_defined
  community.docker.docker_container_copy_into:
    container: datalab-api-1
    path: /home/{{ ansible_ssh_user }}/.ssh/id_ed25519.pub
    container_path: /root/.ssh/id_ed25519.pub
    mode: "0700"

- name: Copy SSH private key into API container
  when: ssh_config_defined
  community.docker.docker_container_copy_into:
    container: datalab-api-1
    path: /home/{{ ansible_ssh_user }}/.ssh/id_ed25519
    container_path: /root/.ssh/id_ed25519
    mode: "0700"

- name: Build and launch app container
  community.docker.docker_compose_v2:
    project_src: /home/{{ ansible_ssh_user }}/datalab
    profiles: prod
    services: app
    build: always
    env_files:
      - /home/{{ ansible_ssh_user }}/datalab/webapp/.env

- name: Add daily backup task to crontab
  ansible.builtin.cron:
    name: Daily snapshots
    minute: "5"
    hour: "4"
    day: "*"
    month: "*"
    job: cd /home/{{ ansible_ssh_user }}/datalab; docker compose exec api pipenv run invoke admin.create-backup --strategy-name daily-snapshots

- name: Add weekly backup task to crontab
  ansible.builtin.cron:
    name: Weekly snapshots
    minute: "5"
    hour: "5"
    day: "7"
    month: "*"
    job: cd /home/{{ ansible_ssh_user }}/datalab; docker compose exec api pipenv run invoke admin.create-backup --strategy-name weekly-snapshots

- name: Add quarterly backup task to crontab
  ansible.builtin.cron:
    name: Quarterly snapshots
    minute: "5"
    hour: "2"
    day: "1"
    month: 1,4,7,10
    job: cd /home/{{ ansible_ssh_user }}/datalab; docker compose exec api pipenv run invoke admin.create-backup --strategy-name quarterly-snapshots
